OK RUN...


COPY FROM START: LOCAL ELEVATOR=====================

Got New Heartbeat ID: {Id:144}, now have 1 elevs
Got New Heartbeat ID: {Id:148}, now have 2 elevs
eventMgr: button {Floor:1, Type: Down} pressed!
elevMgr: newBtn from eventmgr = {Floor:1, Type: Down}
que: AddOrder = {Floor:1, Type: Down}
transMgr: sending new order on network = {Floor:1, Type: Down} to in total 2 elevs
transMgr: RequestOrder on {Floor:1, Type: Down} with cost 1 and 2 elevs online
transMgr: sending cost 1 on order {Floor:1, Type: Down} on network
transMgr: New delegation sequence on order {Floor:1, Type: Down}, setting cost 1 to id 144
transMgr: Received COST msg on order {Floor:1, Type: Down} from 148 with cost 1 
transMgr: Setting cost on order {Floor:1, Type: Down}, with cost 1 to 148 in existing delegation sequence
transMgr: Delegate order {Floor:1, Type: Down} to id 144
transMgr: Received DELEGATE_ORDER msg ({Floor:1, Type: Down}) from 148 to 144
tranMgr: allDelegatedEqual = true. delegated order {Floor:1, Type: Down} to elevator 144
elevMgr: newMsg from transMgr = {Source: 0, ElevatorId: 144, MessageId: DELEGATE_ORDER, Button: {Floor:1, Type: Down}, Cost: 0}
elevMgr: got DELEGATE_ORDER from trans on order {Floor:1, Type: Down} to 144que: UnassignOrderToId = 144
que: AssignOrder = {Floor:1, Type: Down}, ToId = 144
fsm: new destination = 1
fsm: Starting to move in dir = -1 against destination = 1


transMgr: Received DELEGATE_ORDER msg ({Floor:1, Type: Down}) from 144 to 144
transMgr: Received DELEGATE_ORDER ({Floor:1, Type: Down}) where cost not set from 144
fsm: New floor reached= 1
fsm: Destination reached
fsm: Door Opening in floor = 1
elevMgr: floorDone from fsm = 1
que: RemoveOrdersOnFloor = 1
que: RemoveOrder = {Floor:1, Type: Up}
que: RemoveOrder = {Floor:1, Type: Down}
que: RemoveOrder = {Floor:1, Type: Command}
transMgr: sending remove order (floor) on network = 1
fsm: Door closing
fsm: Going idle in floor =  1



COPY FROM START: LOCAL ELEVATOR=====================


Got New Heartbeat ID: {Id:148}, now have 1 elevs
Got New Heartbeat ID: {Id:144}, now have 2 elevs
transMgr: Received NEW_ORDER: {Source: 144, ElevatorId: 0, MessageId: NEW_ORDER, Button: {Floor:1, Type: Down}, Cost: 0}
transMgr: Received COST msg on order {Floor:1, Type: Down} from 144 with cost 1 
elevMgr: newMsg from transMgr = {Source: 144, ElevatorId: 0, MessageId: NEW_ORDER, Button: {Floor:1, Type: Down}, Cost: 0}
elevMgr: newOrder from transMgr = {Floor:1, Type: Down}
que: AddOrder = {Floor:1, Type: Down}
transMgr: RequestOrder on {Floor:1, Type: Down} with cost 1 and 2 elevs online
transMgr: sending cost 1 on order {Floor:1, Type: Down} on network
transMgr: New delegation sequence on order {Floor:1, Type: Down}, setting cost 1 to id 148
transMgr: Setting cost on order {Floor:1, Type: Down}, with cost 1 to 144 in existing delegation sequence
transMgr: Delegate order {Floor:1, Type: Down} to id 144
transMgr: Received DELEGATE_ORDER msg ({Floor:1, Type: Down}) from 148 to 144
transMgr: Received DELEGATE_ORDER msg ({Floor:1, Type: Down}) from 144 to 144
tranMgr: allDelegatedEqual = true. delegated order {Floor:1, Type: Down} to elevator 144
elevMgr: newMsg from transMgr = {Source: 0, ElevatorId: 144, MessageId: DELEGATE_ORDER, Button: {Floor:1, Type: Down}, Cost: 0}
elevMgr: got DELEGATE_ORDER from trans on order {Floor:1, Type: Down} to 144que: UnassignOrderToId = 144
que: AssignOrder = {Floor:1, Type: Down}, ToId = 144
elevMgr: que returned NONVALID_BUTTON while !que.IsEmpty() => all orders taken
transMgr: Received REMOVE_ORDER: {Source: 144, ElevatorId: 0, MessageId: REMOVE_ORDER, Button: {Floor:1, Type: Up}, Cost: 0}
elevMgr: newMsg from transMgr = {Source: 144, ElevatorId: 0, MessageId: REMOVE_ORDER, Button: {Floor:1, Type: Up}, Cost: 0}
elevMgr: got REMOVE_ORDER from trans on floor 1, removing bothque: RemoveOrder = {Floor:1, Type: Up}
que: RemoveOrder = {Floor:1, Type: Down}
